def plotTypicalDay(df = histDF): 
    
    # Aggregate data by hour of the day
    df = df.groupby([df.index.hour])[df.columns].mean()
    
    # Create x-axis values from index which contains hours
    xs = df.index*1000*60*60 # Convert milliseconds to hours
        
    p = figure(plot_width = 800, tools = MyTools, 
               title = "Average Bicycle Count By Hour for One Day")
    for i in range(len(df.columns)):
        p.line(xs, df.iloc[:,i], color= colors[i], legend= df.columns[i])
        p.xaxis[0].formatter = DatetimeTickFormatter(hours = '%a %-I %p')
    
    # show(p)
    return p

def plotTypicalWeek(df = histDF): 
    # Plots average count by hour and day of week
    
    # Aggregate data by day of the week and hour
    df = df.groupby([df.index.weekday, df.index.hour])[df.columns].mean()

    # Create x-axis values from index which contains hours
    #xs = pd.Series(range(len(df)))*1000*60*60 # Convert milliseconds to hours
    xs = (np.array(range(len(df))) + 4*24)*1000*60*60
    p = figure(plot_width = 800, tools = MyTools, 
               title = "Average Bicycle Count By Hour, for One Week")
    for i in range(len(df.columns)):
        p.line(xs, df.iloc[:,i], color= colors[i], legend= df.columns[i])
        p.xaxis[0].formatter = DatetimeTickFormatter(hours = '%a %-I %p',
                                                     days = '%a')
    
    show(p)
    return

def plotTypicalYear(df = histDF):
    # Plots average count of one full typical year

    # Aggregate data by day of the week and hour
    df = df.groupby([df.index.week])[df.columns].mean()

    # Create x-axis values from index which contains hours
    xs = (df.index - 1) * 1000*60*60*24*7

    p = figure(plot_width = 800, tools = MyTools, 
               title = "Average Bicycle Counts By Week, for One Year")
    for i in range(len(df.columns)):
        p.line(xs, df.iloc[:,i], color= colors[i], legend= df.columns[i])
        p.xaxis[0].formatter = DatetimeTickFormatter(months = '%B')
    show(p)
    return

def plotHistory(df = histDF):
    # Plots entire history
    
    # Downsample into one week segments
    df = df.resample('7d').sum()

    p = figure(plot_width = 800, tools = MyTools, 
               title = "Historical Bicycle Counts By Week")
    for i in range(len(df.columns)):
        p.line(x = df.index,y = df.iloc[:,i], color= colors[i], legend= df.columns[i])
        p.xaxis[0].formatter = DatetimeTickFormatter(months = '%B',
                                                     years = '%Y')
    show(p)
    return 